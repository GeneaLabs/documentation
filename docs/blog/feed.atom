<?xml version="1.0"?>
<feed xmlns="https://www.w3.org/2005/Atom">
    <title>GeneaLabs</title>
    <link href="https://genealabs.com" />
    <link type="application/atom+xml" rel="self" href="https://genealabs.com/blog/feed.atom" />
    <updated>2019-11-04T16:46:16+00:00</updated>
    <id>https://genealabs.com/blog/feed.atom</id>
    <author>
        <name>Mike Bronner</name>
    </author>
                <entry>
    <id>https://genealabs.com/blog/the-2019-macos-beta-preview-psa-watch-for-web-developers</id>
    <link type="text/html" rel="alternate" href="https://genealabs.com/blog/the-2019-macos-beta-preview-psa-watch-for-web-developers" />
    <title>The 2019 macOS Beta/Preview PSA Watch For Web Developers</title>
    <published>2019-07-02T00:00:00+00:00</published>
    <updated>2019-07-02T00:00:00+00:00</updated>
    <author>
        <name>Mike Bronner</name>
    </author>
    <summary type="html">It&#039;s time once again to begin the rollercoaster ride that is the annual macOS beta program! As a developer, I am intrigued by the new functionality provided in the OS, as well as new features in Xcode. This year holds huge promises that I am really......</summary>
    <content type="html"><![CDATA[
        <p>It's time once again to begin the rollercoaster ride that is the annual macOS beta program! As a developer, I am intrigued by the new functionality provided in the OS, as well as new features in Xcode. This year holds huge promises that I am really looking forward to!</p>
<p>I will be installing and updating macOS Catalina as new versions come out, and testing them from a web development stand-point (mainly Laravel, but possibly also Server-Side Swift, if I get the time). Any issues I encounter with the following software will be reported here, and I will keep this entry up-to-date as best possible.</p>
<ul>
<li>Visual Studio Code</li>
<li>Vagrant</li>
<li>Virtual Box</li>
<li>Table Plus</li>
<li>(possibly) Atom Editor</li>
<li>Safari (dev tools)</li>
<li>Discord</li>
<li>CleanMyMac X</li>
<li>Transmit</li>
<li>Jumpshare</li>
<li>TG Pro</li>
<li>Affinity Designer</li>
<li>Affinity Photo</li>
<li>Paw</li>
<li>Tower</li>
<li>Permute</li>
<li>Screenflow 8</li>
</ul>
<p>These are most of the apps I use on a day-to-day basis from a full-stack web-dev point-of view.</p>
<p>Today I am installing macOS 10.15.0 on my test machine, a 2016 MacBook Pro with TouchBar. Following that I will attempt to install the apps listed above and see if there are any compatibility issues and report back.</p>
<p><em>Keep an eye on this post, and let me know if there is an app that I missed. If I have it, I will try to add it.</em></p>
<h2>Beta 1 - Build 19A471t from 2019-06-03</h2>
<ul>
<li>✅ VirtualBox 5.2.14</li>
<li>✅ Vagrant 2.0.1</li>
<li>✅ Homestead</li>
<li>✅ VSCode 1.35.0-insider</li>
<li>✅ Tower 2.6.6 and 3.4.1</li>
<li>✅ Paw 3.1.8</li>
<li>✅ TablePlus 2.4</li>
<li>✅ Safari Dev Tools</li>
<li>✅ Screenflow 8.2.3</li>
<li>⛔️ CleanMyMac X 4.4.2 - Smart Scan feature hangs, app updates don't work.</li>
<li>✅ Permute 3.2.5</li>
<li>✅ Jumpshare 2.4.4</li>
<li>✅ Affinity Photo 1.6.7, 1.7</li>
<li>✅ Affinity Designer 1.6.1, 1.7</li>
<li>✅ Discord 0.0.255</li>
<li>✅ Base 2.4.12</li>
</ul>
<h2>Beta 2 - Build 19A487l from 2019-06-17</h2>
<ul>
<li>✅ VirtualBox 5.2.14</li>
<li>✅ Vagrant 2.0.1</li>
<li>⚠️ Homestead: if using NFS, you will need to update your Sites folder directive as follows:
<pre><code class="language-yml">- map: /System/Volumes/Data/Users/yourname/sitesfolder
  to: /home/vagrant/Sites
  type: "nfs"</code></pre></li>
<li>✅ VSCode 1.35.0-insider</li>
<li>✅ Tower 3.4.1</li>
<li>✅ Paw 3.1.8</li>
<li>✅ TablePlus 2.4</li>
<li>✅ Safari Dev Tools</li>
<li>✅ Screenflow 8.2.3</li>
<li>⛔️ CleanMyMac X 4.4.3 - Various issues, Smart Scan feature hangs, malware scan hangs, software update problems, and more...</li>
<li>✅ Permute 3.2.5</li>
<li>✅ Jumpshare 2.4.4</li>
<li>✅ Affinity Photo 1.6.7, 1.7</li>
<li>✅ Affinity Designer 1.6.1, 1.7</li>
<li>✅ Discord 0.0.255</li>
<li>✅ Base 2.4.12</li>
</ul>
<h2>Beta 3 - Build 19A501i from 2019-07-02</h2>
<ul>
<li>✅ VirtualBox 5.2.14</li>
<li>✅ Vagrant 2.0.1</li>
<li>⚠️ Homestead: <strong>if using NFS, you will need to update your Sites folder directive as follows:</strong>
<pre><code class="language-yml">- map: /System/Volumes/Data/Users/yourname/sitesfolder
  to: /home/vagrant/Sites
  type: "nfs"</code></pre></li>
<li>✅ VSCode 1.35.0-insider</li>
<li>✅ Tower 3.4.2</li>
<li>✅ Paw 3.1.8</li>
<li>✅ TablePlus 2.4</li>
<li>✅ Safari Dev Tools</li>
<li>✅ Screenflow 8.2.3</li>
<li>✅ CleanMyMac X 4.4.3</li>
<li>✅ Permute 3.2.5</li>
<li>✅ Jumpshare 2.4.4</li>
<li>✅ Affinity Photo 1.6.7, 1.7</li>
<li>✅ Affinity Designer 1.6.1, 1.7</li>
<li>✅ Discord 0.0.255</li>
<li>✅ Base 2.4.12</li>
</ul>
<h2>Beta 4 - Build 19A512f from 2019-07-16</h2>
<ul>
<li>⛔️ VirtualBox 6</li>
<li>✅ Parallels 14</li>
<li>✅ Vagrant 2.0.1</li>
<li>⚠️ Homestead: <strong>if using NFS, you will need to update your Sites folder directive as follows:</strong>
<pre><code class="language-yml">- map: /System/Volumes/Data/Users/yourname/sitesfolder
  to: /home/vagrant/Sites
  type: "nfs"</code></pre></li>
<li>✅ VSCode 1.35.0-insider</li>
<li>✅ Tower 3.4.2</li>
<li>✅ Paw 3.1.8</li>
<li>✅ TablePlus 2.4</li>
<li>✅ Safari Dev Tools</li>
<li>✅ Screenflow 8.2.3</li>
<li>✅ CleanMyMac X 4.4.3</li>
<li>✅ Permute 3.2.5</li>
<li>✅ Jumpshare 2.4.4</li>
<li>✅ Affinity Photo 1.6.7, 1.7</li>
<li>✅ Affinity Designer 1.6.1, 1.7</li>
<li>✅ Discord 0.0.255</li>
</ul>
<h2>Summary</h2>
<ul>
<li>So far I'm loving Catalina, especially the new Sidecar functionality that lets me use my iPad Pro as a display.</li>
<li>The CleanMyMac issues aren't a primary concern, as I can still run my Mac great without it in all other regards.</li>
</ul>    ]]></content>
</entry>
            <entry>
    <id>https://genealabs.com/blog/when-postgresql-table-sequences-get-out-of-sync</id>
    <link type="text/html" rel="alternate" href="https://genealabs.com/blog/when-postgresql-table-sequences-get-out-of-sync" />
    <title>When PostgreSQL Table Sequences Get Out Of Sync</title>
    <published>2019-06-29T00:00:00+00:00</published>
    <updated>2019-06-29T00:00:00+00:00</updated>
    <author>
        <name>Mike Bronner</name>
    </author>
    <summary type="html">It will often happen that Postgres table sequences get out of sync when you import or restore data. The following query will fix this problem for all tables:
...</summary>
    <content type="html"><![CDATA[
        <p>It will often happen that Postgres table sequences get out of sync when you import or restore data. The following query will fix this problem for all tables:</p>
<pre><code class="language-sql">DO $$
DECLARE
    rec RECORD;
    LAST_ID integer;
BEGIN
    FOR rec IN
        SELECT tc.table_schema,
            tc.table_name,
            ccu.column_name,
            c.data_type
        FROM information_schema.table_constraints tc 
        JOIN information_schema.constraint_column_usage AS ccu
            USING (constraint_schema, constraint_name) 
        JOIN information_schema.columns AS c
            ON c.table_schema = tc.constraint_schema
            AND tc.table_name = c.table_name
            AND ccu.column_name = c.column_name
        WHERE constraint_type = 'PRIMARY KEY'
            AND data_type IN ('integer', 'bigint')
    LOOP
        EXECUTE 'SELECT (' || rec.column_name || ' + 1) as ' || rec.column_name || ' FROM ' || rec.table_schema || '.' || rec.table_name || ' ORDER BY ' || rec.column_name || ' DESC LIMIT 1' INTO LAST_ID;
        IF LAST_ID IS NULL THEN
            LAST_ID = 1;
        END IF;
        EXECUTE 'SELECT SETVAL(''' || rec.table_name || '_' || rec.column_name || '_seq''::regclass, ' || LAST_ID || ');';
    END LOOP;
END;
$$</code></pre>    ]]></content>
</entry>
            <entry>
    <id>https://genealabs.com/blog/dynamic-model-binding-in-nova-resources</id>
    <link type="text/html" rel="alternate" href="https://genealabs.com/blog/dynamic-model-binding-in-nova-resources" />
    <title>Dynamic Model Binding In Laravel Resources</title>
    <published>2019-06-06T00:00:00+00:00</published>
    <updated>2019-06-06T00:00:00+00:00</updated>
    <author>
        <name>Mike Bronner</name>
    </author>
    <summary type="html">
If you are developing Nova packages, you have probably been faced with the situation where you wanted to create Nova resources based on configurable model classes (which would allow the developer using your package to extend your package models and add......</summary>
    <content type="html"><![CDATA[
        <h2>Problem</h2>
<p>If you are developing Nova packages, you have probably been faced with the situation where you wanted to create Nova resources based on configurable model classes (which would allow the developer using your package to extend your package models and add logic required for their app).</p>
<p>Unfortunately the model binding is limited to a static variable on the Resource model:</p>
<pre><code class="language-php">public static $model = "App\User";</code></pre>
<h2>Solution</h2>
<p>Remove the initialization of your <code>$model</code> variable. This will throw errors if things don't load as expected, instead of causing unexpected behaviors if <code>$model</code> is initialized with dummy data.</p>
<pre><code class="language-php">public static $model;</code></pre>
<p>Instead we will initialize the values in the Nova Service provider:</p>
<pre><code class="language-php">    // ...

    public function boot()
    {
        // ...

        if (class_exists("Laravel\Nova\Resource")) {
            \Your\Package\Nova\User::$model = config("package.auth-model-fqcn");
            \Laravel\Nova\Nova::serving(function (ServingNova $event) {
                \Laravel\Nova\Nova::resources([
                    \Your\Package\Nova\User::class,
                ]);
            });
        }

        // ...
    }</code></pre>
<p>This allows you to initialize the class names dynamically, which comes in very handy for package development.</p>
<h4>Previous Approach</h4>
<p>I had previously written this tutorial using method overloading of the <code>Resource</code> class. However, this proved to be problematic, as the <code>$model</code> variable ended up being referenced outside of the Resource class throughout Nova. I subsequently pivoted to this service-provider-based solution, which while not as elegant, is much simpler.</p>
<hr />
<p><em>I hope this was helpful for you. I know customizing Nova can seem daunting and complex. If you have questions pertaining to Nova, please don't hesitate to ask, and I will try to write up the solution in a blog post.</em></p>    ]]></content>
</entry>
            <entry>
    <id>https://genealabs.com/blog/filtering-belongsto-fields-in-laravel-nova</id>
    <link type="text/html" rel="alternate" href="https://genealabs.com/blog/filtering-belongsto-fields-in-laravel-nova" />
    <title>Filtering BelongsTo Fields In Laravel Nova</title>
    <published>2019-06-01T00:00:00+00:00</published>
    <updated>2019-06-01T00:00:00+00:00</updated>
    <author>
        <name>Mike Bronner</name>
    </author>
    <summary type="html">When you&#039;re building out a feature-complete admin dashboard using Laravel Nova, you will probably come across the situation where you need your BelongsTo relationship fields to only show certain records, and not all records.
A common example would be to......</summary>
    <content type="html"><![CDATA[
        <p>When you're building out a feature-complete admin dashboard using Laravel Nova, you will probably come across the situation where you need your BelongsTo relationship fields to only show certain records, and not all records.</p>
<p>A common example would be to allow the user to only select their own records. </p>
<p>There is no obvious way to do this on the field declaration of the BelongsTo field. Rather, you must implement the following method on the original Nova class that represents the BelongsTo model:</p>
<h4>Given the following Book model:</h4>
<pre><code class="language-php">class Book extends Resource
{
    public static $model = 'App\Book';
    public static $title = "title";
    public static $search = [
        "id",
        "title"
    ];

    public function fields(Request $request)
    {
        return [
            ID::make()
                -&gt;sortable(),
            Text::make("Title")
                -&gt;sortable(),
            BelongsTo::make("Author"),
        ];
    }

    public function cards(Request $request)
    {
        return [];
    }

    public function filters(Request $request)
    {
        return [];
    }

    public function lenses(Request $request)
    {
        return [];
    }

    public function actions(Request $request)
    {
        return [];
    }
}</code></pre>
<h4>We can filter all relatable queries:</h4>
<pre><code class="language-php">class Author extends Resource
{
    public static $model = 'App\Author';
    public static $title = "name";
    public static $search = [
        "id",
        "name",
    ];

    public function fields(Request $request)
    {
        return [
            ID::make()
                -&gt;sortable(),
            Text::make("Name")
                -&gt;sortable(),
            HasMany::make("Books"),
        ];
    }

    public function cards(Request $request)
    {
        return [];
    }

    public function filters(Request $request)
    {
        return [];
    }

    public function lenses(Request $request)
    {
        return [];
    }

    public function actions(Request $request)
    {
        return [];
    }

    public static function relatableQuery(NovaRequest $request, $query)
    {
        // TODO: customize the restrictions to your specific needs
        return $query
            -&gt;where("user_id", auth()-&gt;user()-&gt;id);
    }
}</code></pre>
<h4>Or we can filter by specific relationships:</h4>
<pre><code class="language-php">class Author extends Resource
{

    // ...

    public static function relatableBook(NovaRequest $request, $query)
    {
        // TODO: customize the restrictions to your specific needs
        return $query
            -&gt;where("user_id", auth()-&gt;user()-&gt;id)
            -&gt;where("title", "LIKE", "B%");
    }
}</code></pre>
<p>These two options combined allow for some very powerful per-view customization of Nova.</p>
<p><em>Did you find this interesting? Let me know if there are other aspects of Nova that you have questions about, and I will try to answer them.</em></p>    ]]></content>
</entry>
            <entry>
    <id>https://genealabs.com/blog/install-imagick-for-php-7-2-on-ubuntu-18-04</id>
    <link type="text/html" rel="alternate" href="https://genealabs.com/blog/install-imagick-for-php-7-2-on-ubuntu-18-04" />
    <title>Install Imagick for PHP 7.2 on Ubuntu 18.04</title>
    <published>2019-05-28T00:00:00+00:00</published>
    <updated>2019-05-28T00:00:00+00:00</updated>
    <author>
        <name>Mike Bronner</name>
    </author>
    <summary type="html">I use Imagick for many of my web application projects. It is a robust and powerful image manipulation tool that has some advantages over GD. Unfortunately it doesn&#039;t come installed by default in Homestead.


SSH into your Homestead instance.
Run the......</summary>
    <content type="html"><![CDATA[
        <p>I use Imagick for many of my web application projects. It is a robust and powerful image manipulation tool that has some advantages over GD. Unfortunately it doesn't come installed by default in Homestead.</p>
<h2>Installation</h2>
<ol>
<li>SSH into your Homestead instance.</li>
<li>Run the following command:
<pre><code class="language-sh">sudo -i
apt update -y
apt install php-imagick -y
echo extension=imagick.so &gt;&gt; /etc/php/7.2/cli/php.ini
echo extension=imagick.so &gt;&gt; /etc/php/7.2/fpm/php.ini
service php7.2-fpm reload</code></pre></li>
</ol>
<h2>Optional Configuration</h2>
<p>If you would like to enable processing of PDFs in Imagick (it is now disabled by default), perform the following configuration after running the above command, while still in <code>sudo</code> mode:</p>
<ol>
<li>Edit the Iaptmagick configuration file:
<pre><code class="language-sh">nano /etc/ImageMagick-6/policy.xml</code></pre></li>
<li>
<p>Enable PDF editing, change</p>
<pre><code class="language-xml">&lt;policy domain="coder" rights="none" pattern="PDF" /&gt;</code></pre>
<p>to</p>
<pre><code class="language-xml">&lt;policy domain="coder" rights="read|write" pattern="PDF" /&gt;</code></pre>
</li>
</ol>
<p>That should do it!</p>    ]]></content>
</entry>
            <entry>
    <id>https://genealabs.com/blog/restart-phpfpm-automatically-if-server-gets-overloaded</id>
    <link type="text/html" rel="alternate" href="https://genealabs.com/blog/restart-phpfpm-automatically-if-server-gets-overloaded" />
    <title>Restart PHP-FPM Automatically If Server Gets Overloaded</title>
    <published>2019-05-28T00:00:00+00:00</published>
    <updated>2019-05-28T00:00:00+00:00</updated>
    <author>
        <name>Mike Bronner</name>
    </author>
    <summary type="html">From time to time your server may get overloaded because PHP is spawning too many workers, or its workers get hung up, and does not make more available. I had a case where this was happening daily on a server, and it was impacting my clients so much that......</summary>
    <content type="html"><![CDATA[
        <p>From time to time your server may get overloaded because PHP is spawning too many workers, or its workers get hung up, and does not make more available. I had a case where this was happening daily on a server, and it was impacting my clients so much that their sites were becoming non-responsive.</p>
<p>To help alleviate the issue while I was troubleshooting, we wrote a script that would automatically restart PHP-FPM if the server load was deemed too high:</p>
<pre><code class="language-sh">#!/bin/bash

LOAD=`uptime | sed -r 's/^.*average: [0-9.]+, ([0-9.]+),.*$/\1/'`
ISLOADED=`bc &lt;&lt;&lt; "$LOAD &gt; 3"`

if [ $ISLOADED -eq 1 ]
then
        echo "restarting php-fpm at a load of $LOAD"
        systemctl restart php7.2-fpm 
fi</code></pre>
<p>We then added this script to run in cron every minute. With the server stabilizing, I was able to focus on troubleshooting the actual problem, without impacting live websites TOO severely.</p>    ]]></content>
</entry>
            <entry>
    <id>https://genealabs.com/blog/cron-job-error-notifications</id>
    <link type="text/html" rel="alternate" href="https://genealabs.com/blog/cron-job-error-notifications" />
    <title>Cron-Job Error Notifications</title>
    <published>2019-05-28T00:00:00+00:00</published>
    <updated>2019-05-28T00:00:00+00:00</updated>
    <author>
        <name>Mike Bronner</name>
    </author>
    <summary type="html">As part of your job you work with servers, are required to do dev-ops, and end up utilizing cron jobs for various things. If only there were an easy way to monitor cron jobs for failures?!
I was in a situation like that, where I didn&#039;t want to set up......</summary>
    <content type="html"><![CDATA[
        <p>As part of your job you work with servers, are required to do dev-ops, and end up utilizing cron jobs for various things. <strong>If only there were an easy way to monitor cron jobs for failures?!</strong></p>
<p>I was in a situation like that, where I didn't want to set up complicated monitoring solutions; I just wanted a quick email when something went wrong.</p>
<h2>/etc/aliases</h2>
<p>This file is part of sendmail and specifies which email aliases should be forwarded to which user. By default it looks something like this:</p>
<pre><code># /etc/aliases
mailer-daemon: postmaster
postmaster: root
nobody: root
hostmaster: root
usenet: root
news: root
webmaster: root
www: root
ftp: root
abuse: root
noc: root
security: root</code></pre>
<p>Now, what I didn't know was that you can also specify forwarding to external email addresses here. So if you add the following to the end of the file:</p>
<pre><code># forward root to email
root: your@email-server.com</code></pre>
<p>You will get any notification that are sent to <code>root</code> emailed to you. This is extremely helpful for monitoring a server that is acting strange.</p>
<p>Additionally, you can forward any of the other users set up on the server to the root user, which then gets forwarded on to you as well:</p>
<pre><code>user1: root
user2: root
user3: root

# forward root to email
root: your@email-server.com</code></pre>
<p>I hope this helps maintain your sanity, as it helped mine. :)</p>    ]]></content>
</entry>
            <entry>
    <id>https://genealabs.com/blog/securing-your-entire-home-network-with-encryptme</id>
    <link type="text/html" rel="alternate" href="https://genealabs.com/blog/securing-your-entire-home-network-with-encryptme" />
    <title>Securing Your Entire Home Network With encrypt.me</title>
    <published>2019-05-27T00:00:00+00:00</published>
    <updated>2019-05-27T00:00:00+00:00</updated>
    <author>
        <name>Mike Bronner</name>
    </author>
    <summary type="html">If you have an eero and subscribe to eero Plus, you get a free subscription to  encrypt.me , one of the most performant VPN providers I have ever used. Unfortunately they only provide an app to secure individual devices, and no clear way to protect......</summary>
    <content type="html"><![CDATA[
        <p>If you have an eero and subscribe to eero Plus, you get a free subscription to  <a href="https://encrypt.me">encrypt.me</a> , one of the most performant VPN providers I have ever used. Unfortunately they only provide an app to secure individual devices, and no clear way to protect entire networks. This leaves all your IoT devices, as well as home entertainment devices like Roku, AppleTV, etc,  out in the cold.</p>
<p>The following is a guide to help you extract the VPN settings and apply them to your OpenVPN router.</p>
<p><em>If you are using an eero and want to implement network-wide VPN, you will have to create a VPN gateway in front of your eero and either put the eero in bridge mode or double-nat it, which is what I do.</em></p>
<h2>Assumptions</h2>
<ul>
<li>macOS desktop</li>
<li>DD-WRT VPN gateway router</li>
<li><a href="https://encrypt.me/apps/">EncryptMe app</a>  is installed.</li>
</ul>
<p>If your setup differs, please make the appropriate adjustments to this guide.</p>
<h2>Guide</h2>
<h3>Get The Configuration</h3>
<ol>
<li>
<p>Open the <strong>EncryptMe</strong> app on your computer.</p>
</li>
<li>
<p>Connect to your preferred or fastest connection.</p>
</li>
<li>
<p>Open <strong>Terminal</strong> and enter the following commands:</p>
<pre><code class="language-sh">sudo -i
ps aux | grep openvpn</code></pre>
</li>
<li>
<p>Extract the location of the OpenVPN config file from the output.</p>
</li>
<li>
<p>Output the content of the config file:</p>
<pre><code class="language-sh">cat /var/folders/zz/zyxvpxvq6csfxvn_n0000000000000/T/cloak.20190527094324.conf</code></pre>
</li>
<li>
<p>Quit the <strong>EncryptMe</strong> app.</p>
</li>
</ol>
<h3>Implement The Settings</h3>
<ol>
<li>Navigate to the VPN settings page on your router.</li>
<li>Enable <strong>Start OpenVPN Client</strong>.</li>
<li>Enter the server listed in the <code>remote</code> setting in <strong>Server IP/Name</strong>.</li>
<li>Enter the port listed in the <code>remote</code> setting in <strong>Port</strong>.</li>
<li>Enter the protocol listed in the <code>remote</code> setting in <strong>Tunnel Protocol</strong>.</li>
<li>Select the cipher listed in the <code>cipher</code> setting in <strong>Encryption Cipher</strong>.</li>
<li>Select the algorithm listed in <code>auth</code> setting in <strong>Hash Algorithm</strong>.</li>
<li>Leave <strong>User Pass Authentication</strong> disabled.</li>
<li>Enable <strong>Advanced Options</strong>.</li>
<li>Leave <strong>TLS Cipher</strong> set to <code>None</code>.</li>
<li>Select the compression listed in <code>comp-lzo</code> setting in <strong>LZO Compression</strong>.</li>
<li>Enable <strong>NAT</strong>.</li>
<li>Enable <strong>Firewall Protection</strong>.</li>
<li>Leave <strong>IP Address</strong> empty.</li>
<li>Leave <strong>Subnet Mask</strong> empty.</li>
<li>Set <strong>Tunnel MTU Setting</strong> to <code>1500</code>.</li>
<li>Leave <strong>Tunnel UDP Fragment</strong> empty.</li>
<li>Enable <strong>Tunnel UDP MSS-Fix</strong>.</li>
<li>Uncheck <strong>nsCertType Verification</strong>.</li>
<li>Leave <strong>TLS Auth Key</strong> empty.</li>
<li>Set <strong>Additional Config</strong> to <code>redirect-gateway</code>.</li>
<li>Leave <strong>Policy Based Routing</strong> empty.</li>
<li>Leave <strong>PKCS12 Key</strong> empty.</li>
<li>Leave <strong>Static Key</strong> empty.</li>
<li>Copy paste the text between the <code>&lt;ca&gt;</code> and <code>&lt;/ca&gt;</code> tags into the <strong>CA Cert</strong> field.</li>
<li>Copy/paste the text between the <code>&lt;cert&gt;</code> and <code>&lt;/cert&gt;</code> tags into the <strong>Public Client Cert</strong> field.</li>
<li>Copy/paste the text between the <code>&lt;key&gt;</code> and <code>&lt;/key&gt;</code> tags into the <strong>Private Client Key</strong> field.</li>
<li>Hit <strong>Apply Settings</strong>.</li>
<li>Navigate to the Status &gt; OpenVPN tab to verify that the connection succeeded. It may take a moment to connect, so if you don't see <code>CONNECT SUCCESS</code> yet, give it a few refreshes. If it still doesn't connect, double-check that the settings were entered correctly. See the screenshot below as an example of what it should look like.</li>
</ol>
<h4>Example Screenshot</h4>
<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1558975708205/v6ipVsTVH.png" alt="1*EBeeEx3W-U71ynPsIBLKuQ.png" /></p>
<h2>Summary</h2>
<h3>Benefits</h3>
<ul>
<li>One single connection that protects your entire network.</li>
<li>Highly performant VPN service.</li>
<li>Free VPN, if you are an eero Plus subscriber.</li>
</ul>
<h3>Drawbacks</h3>
<ul>
<li>Amazon, Netflix, and other streaming providers don't like VPNs and block them. Encrypt.me does not seem to provide any form of unblocking services to address this.</li>
<li>The certs seem to expire every 3 months or so, which means you need to periodically perform this exercise to keep your connection up.</li>
<li>Encrypt.me does log session and browsing activity, which some claim defeats the purpose of VPNs. My main priority is protecting my privacy, mainly my ISP from reselling my data.</li>
<li>Encrypt.me blocks certain traffic they deem &quot;nefarious&quot; by default. For example they block torrent traffic, but it can be unblocked per request on your account.</li>
</ul>
<p>I would love to hear your experiences, or suggestions on improving this process. How are you protecting your network?</p>    ]]></content>
</entry>
            <entry>
    <id>https://genealabs.com/blog/how-to-convert-png-to-tiled-tiff</id>
    <link type="text/html" rel="alternate" href="https://genealabs.com/blog/how-to-convert-png-to-tiled-tiff" />
    <title>How To Convert PNG To Tiled TIFF</title>
    <published>2019-05-25T00:00:00+00:00</published>
    <updated>2019-05-25T00:00:00+00:00</updated>
    <author>
        <name>Mike Bronner</name>
    </author>
    <summary type="html">


...</summary>
    <content type="html"><![CDATA[
        <h2>Install ImageMagick on macOS</h2>
<pre><code class="language-sh">brew install imagemagick</code></pre>
<h2>Use ImageMagick (convert) command</h2>
<pre><code class="language-sh">convert myAwesome.png -define tiff:tile-geometry=256x256 -depth 8 ptif:myAwesome.tif</code></pre>    ]]></content>
</entry>
            <entry>
    <id>https://genealabs.com/blog/what-to-do-when-vagrant-wont-start-your-homestead-box</id>
    <link type="text/html" rel="alternate" href="https://genealabs.com/blog/what-to-do-when-vagrant-wont-start-your-homestead-box" />
    <title>What To Do When Vagrant Won&#039;t Start Your Homestead Box</title>
    <published>2019-05-25T00:00:00+00:00</published>
    <updated>2019-05-25T00:00:00+00:00</updated>
    <author>
        <name>Mike Bronner</name>
    </author>
    <summary type="html">


...</summary>
    <content type="html"><![CDATA[
        <h2>Error</h2>
<pre><code>There was an error while executing `VBoxManage`, a CLI used by Vagrant
for controlling VirtualBox. The command and stderr is shown below.

Command: ["hostonlyif", "create"]

Stderr: 0%...
Progress state: NS_ERROR_FAILURE
VBoxManage: error: Failed to create the host-only adapter
VBoxManage: error: VBoxNetAdpCtl: Error while adding new interface: failed to open /dev/vboxnetctl: No such file or directory
VBoxManage: error: Details: code NS_ERROR_FAILURE (0x80004005), component HostNetworkInterfaceWrap, interface IHostNetworkInterface
VBoxManage: error: Context: "RTEXITCODE handleCreate(HandlerArg *)" at line 94 of file VBoxManageHostonly.cpp</code></pre>
<h2>Solution</h2>
<pre><code class="language-sh">sudo "/Library/Application Support/VirtualBox/LaunchDaemons/VirtualBoxStartup.sh" restart</code></pre>    ]]></content>
</entry>
            <entry>
    <id>https://genealabs.com/blog/testing-against-multiple-laravel-versions</id>
    <link type="text/html" rel="alternate" href="https://genealabs.com/blog/testing-against-multiple-laravel-versions" />
    <title>Testing Against Multiple Laravel Versions</title>
    <published>2018-05-28T00:00:00+00:00</published>
    <updated>2018-05-28T00:00:00+00:00</updated>
    <author>
        <name>Mike Bronner</name>
    </author>
    <summary type="html">One thing that has been tedious over the last few years was maintaining Laravel packages over multiple Laravel releases. Michael Dyrynda wrote an excellent blog post on Travis-CI build matrixes that covers setting up Travis to install different composer......</summary>
    <content type="html"><![CDATA[
        <p>One thing that has been tedious over the last few years was maintaining Laravel packages over multiple Laravel releases. <a href="https://medium.com/@michaeldyrynda">Michael Dyrynda</a> wrote an excellent <a href="https://dyrynda.com.au/blog/testing-multiple-dependency-versions-with-travis-ci">blog post on Travis-CI build matrixes</a> that covers setting up Travis to install different composer dependencies.</p>
<p>We can leverage this approach to set up different test environments to cover different versions of Laravel.</p>
<p>Additionally, we can put together a few scripts to make this all work in our local environment as well!</p>
<h3>Use Case</h3>
<p>So when would this process come in handy? There are other means of maintaining Laravel packages:</p>
<ul>
<li>Only maintain support for the most recent version of Laravel, and throw up a new branch each time a new version of Laravel is released. In this model all previous branches grow stale and do not get support or improvements.</li>
<li>Only support the most recent version of Laravel, and keep everything on the same branch, using semver to keep the requirements in-line. This way composer will install the version of your package that meets the users’ requirements. Here, too, only the most recent version of Laravel is supported.</li>
</ul>
<p>The common draw-back with these scenarios is that so many users who would like to use your package might not be able to, because their project is not (maybe is never) on the latest Laravel version. Also, users who don’t immediately upgrade their Laravel version when you update your package to the next Laravel version will be left in the cold and won’t receive patches or updates until they do update.</p>
<p><strong>There really is no good scenario that covers all bases, but the following method aims to provide as wide range of support as possible, with as little overhead as possible.</strong></p>
<h3>Requirements</h3>
<p>Ideally, your Laravel package is already set up to use these, as we won’t cover their implementation here:</p>
<ul>
<li><a href="https://github.com/orchestral/testbench">Orchestra Testbench</a> (and the other variants as necessary: testbench-browser-kit, testbench-dusk, testbench-db, etc.)</li>
<li><a href="https://travis-ci.org">Travis-CI</a> (this is free for open-source packages)</li>
</ul>
<h3>Configuring Travis-CI</h3>
<p>Take a read through Michael’s blog post (and follow his instructions if you like). Once you have an idea of what needs to be done, we will implement those changes, with a slightly different approach, to your project’s <code>.travis.yml</code> file:</p>
<iframe width="700" height="250" src="/media/40165969ea5ddd72dafbd4203fdeb8e6?postId=3485cb5762e2" data-media-id="40165969ea5ddd72dafbd4203fdeb8e6" data-thumbnail="https://i.embed.ly/1/image?url=https%3A%2F%2Favatars2.githubusercontent.com%2Fu%2F1791050%3Fs%3D400%26v%3D4&amp;key=a19fcc184b9711e1b4764040d3dc5c07" allowfullscreen="" frameborder="0"><iframe width="700" height="250" src="/media/40165969ea5ddd72dafbd4203fdeb8e6?postId=3485cb5762e2" data-media-id="40165969ea5ddd72dafbd4203fdeb8e6" data-thumbnail="https://i.embed.ly/1/image?url=https%3A%2F%2Favatars2.githubusercontent.com%2Fu%2F1791050%3Fs%3D400%26v%3D4&amp;key=a19fcc184b9711e1b4764040d3dc5c07" allowfullscreen="" frameborder="0"></iframe></iframe>
<p>Let’s go over what changed:</p>
<ul>
<li>Removed the <code>php</code> and <code>env</code> sections.</li>
<li>Created a comprehensive <code>matrix</code> section that covers all our build permutations. We’re not specifying different package versions here, but instead are creating an environment variable for each version of laravel under each version of PHP.</li>
<li>Added a line under <code>before_script</code> to give our scripts the necessary permissions to be executed.</li>
<li>Changed the <code>script</code> section to only call our custom script, which we will cover next.</li>
</ul>
<p>Everything else in your <code>.travis.yml</code> file can remain as you had it, it will likely differ from my example above.</p>
<h3>Creating The Test Script</h3>
<p>We now need to achieve the following in our test scripts (one for each version of Laravel we will be testing):</p>
<ul>
<li>Install the correct dependencies for that version of Laravel.</li>
<li>Run PHPUnit.</li>
</ul>
<iframe width="700" height="250" src="/media/2ce0287f316cbebd07e4549fd9b7b14e?postId=3485cb5762e2" data-media-id="2ce0287f316cbebd07e4549fd9b7b14e" data-thumbnail="https://i.embed.ly/1/image?url=https%3A%2F%2Favatars2.githubusercontent.com%2Fu%2F1791050%3Fs%3D400%26v%3D4&amp;key=a19fcc184b9711e1b4764040d3dc5c07" allowfullscreen="" frameborder="0"><iframe width="700" height="250" src="/media/2ce0287f316cbebd07e4549fd9b7b14e?postId=3485cb5762e2" data-media-id="2ce0287f316cbebd07e4549fd9b7b14e" data-thumbnail="https://i.embed.ly/1/image?url=https%3A%2F%2Favatars2.githubusercontent.com%2Fu%2F1791050%3Fs%3D400%26v%3D4&amp;key=a19fcc184b9711e1b4764040d3dc5c07" allowfullscreen="" frameborder="0"></iframe></iframe>
<p>Let’s take a closer look:</p>
<ul>
<li>Make a backup of <code>composer.json</code> so it doesn’t get messed up when we run these scripts locally.</li>
<li>Use <code>sed</code> to create a Laravel-version-specific <code>phpunit.xml</code> file.</li>
<li>Remove or require any dependencies based on the version of Laravel.</li>
<li>Run <code>composer update</code>.</li>
<li>Revert <code>composer.json</code> back to its original state.</li>
<li>Create a build log directory for code-coverage purposes (optional).</li>
<li>Run phpunit without loading any <code>php.ini</code> files to speed things up (optional). This can be risky, please read <a href="https://medium.com/@drfraker">Dustin Fraker</a>’s blog post on this topic, and make adjustments as needed.
We are also loading the custom <code>phpunit-xx.xml</code> file. The remaining options shown in the example are for code coverage purposes.</li>
<li>And lastly, we remove the version-specific <code>phpunit-xx.xml</code> file.</li>
</ul>
<p>Encapsulating the testing process into scripts like this allow us to run these tests locally as well, and not have to wait for Travis to show us any failures. You would create a copy of this file for each version of Laravel, replacing <code>phpunit-55.xml</code> with <code>phpunit-54.xml</code>, and so on. Each file corresponds to each <code>PU_FILE=xx</code> entry in <code>.travis.yml</code>.</p>
<h3>Optional Cleanup</h3>
<ul>
<li>If you added the line to create the <code>build</code> directory, I would recommend adding that to your <code>.git-ignore</code> file: <code>/build</code>.</li>
<li><a href="https://hannesvdvreken.com/2015/01/14/gitattributes/">It is recommend</a> to maintain a <code>[.gitattributes](https://www.git-scm.com/docs/gitattributes)</code> file in your package repos. It can do so much, but I have started using it to exclude non-distribution files from my packages, so that when people install them with composer, they only pull down what’s needed to run the package. This makes for leaner downloads, and less cruft in projects.</li>
</ul>
<h3>Summary</h3>
<ul>
<li>We configured Travis to test all permutations of PHP and Laravel.</li>
<li>We wrote some scripts to assist with that, and more importantly, allow us to run these tests locally.</li>
</ul>
<p>To run your tests locally, all you need to do is call <code>./tests/pu-55.sh</code> or whatever your equivalent script name is, and you’re all set. Then if you want to test Laravel 5.4, simply run <code>./tests/pu-54.sh</code>, or <code>./tests/pu-56.sh</code> for Laravel 5.6, and so on.</p>
<p><strong>I would love to hear your feedback on this process.</strong> Have you done something similar? Do you have suggestions for improvements? Has this opened new doors for you?</p>
<h3>Source Citations &amp; Credits</h3>
<p><a href="https://github.com/sjbronner">Sebastian Bronner</a>, who helped me brainstorm some initial ideas and found Michael’s blog post.</p>
<p><a href="https://github.com/orchestral/testbench" title="https://github.com/orchestral/testbench"><strong>orchestral/testbench</strong>
_testbench - [Package] Laravel Testing Helper for Packages Development_github.com</a><a href="https://github.com/orchestral/testbench"></a><a href="https://dyrynda.com.au/blog/testing-multiple-dependency-versions-with-travis-ci" title="https://dyrynda.com.au/blog/testing-multiple-dependency-versions-with-travis-ci"><strong>Michael Dyrynda | Testing multiple dependency versions with Travis CI</strong>
_The next step was to write the necessary tests describing my desired inputs and outputs. Locally, I was testing using…_dyrynda.com.au</a><a href="https://dyrynda.com.au/blog/testing-multiple-dependency-versions-with-travis-ci"></a><a href="https://dustinfraker.com/speed-up-your-phpunit-tests-disable-xdebug/" title="https://dustinfraker.com/speed-up-your-phpunit-tests-disable-xdebug/"><strong>Speed Up Your PHPUnit Tests - Disable Xdebug - Dustin Fraker</strong>
_I recently noticed that my PHPUnit tests were running kind of slow which prompted me to start looking into how to speed…_dustinfraker.com</a><a href="https://dustinfraker.com/speed-up-your-phpunit-tests-disable-xdebug/"></a><a href="https://hannesvdvreken.com/2015/01/14/gitattributes/" title="https://hannesvdvreken.com/2015/01/14/gitattributes/"><strong>.gitattributes</strong>
_Working as a web developer. On his blog he writes about things he learned while experimenting with tools he might use…_hannesvdvreken.com</a><a href="https://hannesvdvreken.com/2015/01/14/gitattributes/"></a></p>    ]]></content>
</entry>
            <entry>
    <id>https://genealabs.com/blog/eliminate-port-forwarding-and-hosts-files-configuration-from-homestead</id>
    <link type="text/html" rel="alternate" href="https://genealabs.com/blog/eliminate-port-forwarding-and-hosts-files-configuration-from-homestead" />
    <title>Eliminate Port Forwarding and Hosts File Configuration From Laravel Homestead!</title>
    <published>2017-12-07T00:00:00+00:00</published>
    <updated>2017-12-07T00:00:00+00:00</updated>
    <author>
        <name>Mike Bronner</name>
    </author>
    <summary type="html">You know the drill with Homestead: maintain a huge list of domains in &lt;code&gt;/etc/hosts&lt;/code&gt;, make sure all the ports are forwarding correctly, have complex config files to handle running artisan commands outside of homestead, and so on. This has always......</summary>
    <content type="html"><![CDATA[
        <p>You know the drill with Homestead: maintain a huge list of domains in <code>/etc/hosts</code>, make sure all the ports are forwarding correctly, have complex config files to handle running artisan commands outside of homestead, and so on. This has always been annoying me, so when the <code>.dev</code> TLD switched to forced HTTPS a few weeks back in macOS 10.13.2-beta, (which has since released), as well as in Chrome now, it was time to find a better workflow.</p>
<p>At first I started experimenting with complicated Bonjour configurations and <code>.local</code> domains, but that had more drawbacks than benefits. I ran the problem by my <a href="https://github.com/sjbronner">brother</a>. He had a few suggestions that could drastically simplify the issue:</p>
<ul>
<li>remove port forwarding</li>
<li>point all sites to the IP address configured in <code>Homestead.yaml</code>.</li>
</ul>
<p>That was a good first step, as we no longer needed to worry about possible port conflicts on our computers, and could still use the default ports for services running in Homestead. The <code>hosts</code> file was still a problem, though.</p>
<p>The solution for that was to register a public subdomain that points to Homestead’s IP address. Now that we have that in place, we cleared out all the entries from <code>/etc/hosts</code> that were specific to Homestead sites, and lo-and-behold, we have streamlined the Homestead workflow process quite a bit.</p>
<blockquote>
<p>The only place you need to make configuration changes is now in <code>Homestead.yaml</code> when adding new sites.</p>
</blockquote>
<h4>Assumptions</h4>
<ul>
<li>Your Homestead’s IP address is <code>192.168.10.10</code>. If yours is different, use that IP address in the instructions below.</li>
<li>Your development computer has internet access. If not, you may still have to maintain a <code>/etc/hosts</code> file.</li>
<li>You have a registered domain you can use for development purposes, referenced in the steps below as <code>example.com</code>.</li>
<li>The instructions are geared toward Mac users. If you are on Linus, you may need to adjust some things. Eliminating port forwarding on Windows might not work.</li>
<li>I keep all my Homestead sites in a <code>Sites</code> folder. You may call this something else on your system. By default <code>Homestead.yaml</code> defines this folder as <code>~/Code</code>.</li>
</ul>
<h4>Implementation</h4>
<ul>
<li>Go to your registrar and create an <code>A</code> record with host <code>*.dev</code> that points to <code>192.168.10.10</code>.</li>
<li>Open your <code>Homestead.yaml</code> file in an editor of your choice.</li>
<li>Remove Homestead’s default port forwarding rules by adding the following line:<code>default_ports: false</code></li>
<li>Remove or comment out your custom port forward rules.</li>
<li>Rename the TLDs of the site entries from whatever they were at (<code>.dev</code> or <code>.test</code>, etc) to <code>&lt;site&gt;.dev.example.com</code>. Replace <code>&lt;site&gt;</code> with whatever you want to access that site as in Homestead:</li>
</ul>
<iframe width="700" height="250" src="/media/db76b110e0e6c3d7a31f9f8eb58827e2?postId=1d3ab956bd5b" data-media-id="db76b110e0e6c3d7a31f9f8eb58827e2" data-thumbnail="https://i.embed.ly/1/image?url=https%3A%2F%2Favatars2.githubusercontent.com%2Fu%2F1791050%3Fs%3D400%26v%3D4&amp;key=a19fcc184b9711e1b4764040d3dc5c07" allowfullscreen="" frameborder="0"><iframe width="700" height="250" src="/media/db76b110e0e6c3d7a31f9f8eb58827e2?postId=1d3ab956bd5b" data-media-id="db76b110e0e6c3d7a31f9f8eb58827e2" data-thumbnail="https://i.embed.ly/1/image?url=https%3A%2F%2Favatars2.githubusercontent.com%2Fu%2F1791050%3Fs%3D400%26v%3D4&amp;key=a19fcc184b9711e1b4764040d3dc5c07" allowfullscreen="" frameborder="0"></iframe></iframe>
<ul>
<li>Go ahead and save your <code>Homestead.yaml</code> file and open <code>/etc/hosts</code> for editing.</li>
<li>Clear out (or comment, for now) all the Homestead domain and IP entries.</li>
</ul>
<p>If you now fire up and provision homestead <code>vagrant up --provision</code>, you should be able to access your dev site in your browser using the following URL: <code>purpleturles.dev.example.com</code>, <strong>without using the </strong><code>**:8000**</code> <strong>port</strong>!</p>
<p>We’re not quite out of the woods just yet, as you will quickly find out that the Redis and Postgres services are refusing connections. This is because they are not bound to the <code>192.168.10.10</code> address. Let’s get that wrapped up.</p>
<ul>
<li>SSH into Homestead: <code>vagrant ssh</code>.</li>
<li>Edit the Postgres configuration file:</li>
</ul>
<iframe width="700" height="250" src="/media/a36064122aef7a86c6143c292279bfde?postId=1d3ab956bd5b" data-media-id="a36064122aef7a86c6143c292279bfde" data-thumbnail="https://i.embed.ly/1/image?url=https%3A%2F%2Favatars2.githubusercontent.com%2Fu%2F1791050%3Fs%3D400%26v%3D4&amp;key=a19fcc184b9711e1b4764040d3dc5c07" allowfullscreen="" frameborder="0"><iframe width="700" height="250" src="/media/a36064122aef7a86c6143c292279bfde?postId=1d3ab956bd5b" data-media-id="a36064122aef7a86c6143c292279bfde" data-thumbnail="https://i.embed.ly/1/image?url=https%3A%2F%2Favatars2.githubusercontent.com%2Fu%2F1791050%3Fs%3D400%26v%3D4&amp;key=a19fcc184b9711e1b4764040d3dc5c07" allowfullscreen="" frameborder="0"></iframe></iframe>
<ul>
<li>Add the following line at the end:</li>
</ul>
<iframe width="700" height="250" src="/media/af47cd1ca310ac491d4088b935713e1a?postId=1d3ab956bd5b" data-media-id="af47cd1ca310ac491d4088b935713e1a" data-thumbnail="https://i.embed.ly/1/image?url=https%3A%2F%2Favatars2.githubusercontent.com%2Fu%2F1791050%3Fs%3D400%26v%3D4&amp;key=a19fcc184b9711e1b4764040d3dc5c07" allowfullscreen="" frameborder="0"><iframe width="700" height="250" src="/media/af47cd1ca310ac491d4088b935713e1a?postId=1d3ab956bd5b" data-media-id="af47cd1ca310ac491d4088b935713e1a" data-thumbnail="https://i.embed.ly/1/image?url=https%3A%2F%2Favatars2.githubusercontent.com%2Fu%2F1791050%3Fs%3D400%26v%3D4&amp;key=a19fcc184b9711e1b4764040d3dc5c07" allowfullscreen="" frameborder="0"></iframe></iframe>
<ul>
<li>Go ahead and save the Postgres config file, and open the Redis config file for editing:</li>
</ul>
<iframe width="700" height="250" src="/media/33a8a42313f72a60b80858ff1a7df1f8?postId=1d3ab956bd5b" data-media-id="33a8a42313f72a60b80858ff1a7df1f8" data-thumbnail="https://i.embed.ly/1/image?url=https%3A%2F%2Favatars2.githubusercontent.com%2Fu%2F1791050%3Fs%3D400%26v%3D4&amp;key=a19fcc184b9711e1b4764040d3dc5c07" allowfullscreen="" frameborder="0"><iframe width="700" height="250" src="/media/33a8a42313f72a60b80858ff1a7df1f8?postId=1d3ab956bd5b" data-media-id="33a8a42313f72a60b80858ff1a7df1f8" data-thumbnail="https://i.embed.ly/1/image?url=https%3A%2F%2Favatars2.githubusercontent.com%2Fu%2F1791050%3Fs%3D400%26v%3D4&amp;key=a19fcc184b9711e1b4764040d3dc5c07" allowfullscreen="" frameborder="0"></iframe></iframe>
<ul>
<li>Add the following entry after the existing bind entry:</li>
</ul>
<iframe width="700" height="250" src="/media/2aa4336aef39786fd68cabfca7efc91a?postId=1d3ab956bd5b" data-media-id="2aa4336aef39786fd68cabfca7efc91a" data-thumbnail="https://i.embed.ly/1/image?url=https%3A%2F%2Favatars2.githubusercontent.com%2Fu%2F1791050%3Fs%3D400%26v%3D4&amp;key=a19fcc184b9711e1b4764040d3dc5c07" allowfullscreen="" frameborder="0"><iframe width="700" height="250" src="/media/2aa4336aef39786fd68cabfca7efc91a?postId=1d3ab956bd5b" data-media-id="2aa4336aef39786fd68cabfca7efc91a" data-thumbnail="https://i.embed.ly/1/image?url=https%3A%2F%2Favatars2.githubusercontent.com%2Fu%2F1791050%3Fs%3D400%26v%3D4&amp;key=a19fcc184b9711e1b4764040d3dc5c07" allowfullscreen="" frameborder="0"></iframe></iframe>
<p>Now we’re cooking! Go ahead and save, exit Homestead, and restart it once more: <code>vagrant reload</code>.</p>
<blockquote>
<p>You should now have access to all your dev sites without the need to do port forwarding or maintaining a tedious <code>/etc/hosts</code> file!</p>
</blockquote>
<p><em>Please let me know if you have any questions or comments. I would love to hear about your experiences with this!</em></p>
<p><em>I would like to thank my brother, Sebastian, for his help in this and sparking some interesting discussions and thoughts on how to achieve this!</em></p>    ]]></content>
</entry>
            <entry>
    <id>https://genealabs.com/blog/running-phpstorm-on-el-capitan</id>
    <link type="text/html" rel="alternate" href="https://genealabs.com/blog/running-phpstorm-on-el-capitan" />
    <title>Running PHPStorm On El Captian</title>
    <published>2017-10-05T00:00:00+00:00</published>
    <updated>2017-10-05T00:00:00+00:00</updated>
    <author>
        <name>Mike Bronner</name>
    </author>
    <summary type="html">The following are some tweaks to get PHPStorm working on OS X 10.11 “El Capitan”.


Install SASS gem: sudo gem install sass
Get the location of the sass command: which sass (in my case it was /usr/local/bin/scss)
Update the SCSS File Watcher settings......</summary>
    <content type="html"><![CDATA[
        <p>The following are some tweaks to get PHPStorm working on OS X 10.11 “El Capitan”.</p>
<h3>SCSS File Watcher</h3>
<ol>
<li>Install SASS gem: <strong>sudo gem install sass</strong></li>
<li>Get the location of the sass command: <strong>which sass</strong> (in my case it was <strong>/usr/local/bin/scss</strong>)</li>
<li>Update the SCSS File Watcher settings to point to your sass command:</li>
</ol>
<p><img src="https://cdn-images-1.medium.com/max/1600/1*KWmZ1kasiiaFPzLPQ1Hkag.png" alt="" /></p>    ]]></content>
</entry>
            <entry>
    <id>https://genealabs.com/blog/when-should-you-hire-a-translator</id>
    <link type="text/html" rel="alternate" href="https://genealabs.com/blog/when-should-you-hire-a-translator" />
    <title>When should you hire a translator?</title>
    <published>2017-10-05T00:00:00+00:00</published>
    <updated>2017-10-05T00:00:00+00:00</updated>
    <author>
        <name>Mike Bronner</name>
    </author>
    <summary type="html">Most genealogists face this question when they find foreign-language documents. Even though you may be able to make out many words, or even most of the text, you might not feel you comprehend it in its entirety. This article aims to help you decide when......</summary>
    <content type="html"><![CDATA[
        <p>Most genealogists face this question when they find foreign-language documents. Even though you may be able to make out many words, or even most of the text, you might not feel you comprehend it in its entirety. This article aims to help you decide when and why you should hire a translator.</p>
<p>In this first section we will cover the various genealogical standards you should consider. Then we discuss going it on your own, ways to get help, and a short checklist to help you simplify your decision.</p>
<h3>You should hire a translator if …</h3>
<p>… Well? You might be feel that you can accomplish it by yourself and your research is progressing well. Or you might be on the other end of the spectrum: not able to make heads or tails of these foreign documents. Whatever the situation, it turns out this is quite the gray area.</p>
<p>We will consider the <a href="http://www.amazon.com/gp/product/1630260185/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=1630260185&amp;linkCode=as2&amp;tag=genlinx&amp;linkId=J4DDJ2WV7DXYBWE5">Genealogy Standards</a> published by the Board for Certification of Genealogists. This helps ensure that our translation adheres to the same standards as the rest of our research.</p>
<blockquote>
<p>Accuracy is fundamental to genealogy.
Without it, a family’s history would be fiction.(1)</p>
</blockquote>
<h4>… you have a hard time reading the writing.</h4>
<p><img src="https://cdn-images-1.medium.com/max/1600/1*CKqGa-4EthgxCZERLAIHXQ.jpeg" alt="" /></p>
<p><strong>Genealogy Standard #23: Reading handwriting.</strong>(2) Often you will be able to eek out dates and names, and try to guess the rest. But consider the the clues missed in the portions of the text you don’t understand. It might be wise to hire a translator.</p>
<h4>… you do not fully understand the meaning.</h4>
<p><img src="https://cdn-images-1.medium.com/max/1600/1*KcX_YTNfVL_BpGHdVcgtkw.jpeg" alt="" /></p>
<p><strong>Genealogy Standard #24: Understand meanings.</strong>(3) You might have a document that seems understandable, but some of the words Google Translate spits out seem odd or conflict with other areas of the text. This is an indicator that you are missing more evidence contained in the text.</p>
<p><strong>Genealogy Standard #26: Distinction between content and comments.</strong>(4) Professional translators will separate their thoughts and comments on the subject matter from the actual translation itself. You may find that you interject your own ideas and thoughts into the translation to fill the gaps.</p>
<p><strong>Genealogy Standard #40: Evidence Mining.</strong>(5) While you may be able to gather most direct evidence yourself, you likely will find it nearly impossible to identify indirect or even negative evidence from a text you do not completely understand. Yet those forms of evidence are often what make or break our proofs.</p>
<p><strong>Genealogy Standard #43: Evidence integrity.</strong>(6) It is difficult for a translator to include bias that pertains to your specific research question. The translator will evaluate the text in isolation and translate it solely based its content.</p>
<p><strong>Genealogy Standard #45: Assumptions.</strong>(7) As a genealogist, you should identify assumptions in your research and categorize them accordingly. You will likely find <em>unsound assumptions</em>(8) in your translation.</p>
<h4>… you aren’t sure of the context.</h4>
<p><img src="https://cdn-images-1.medium.com/max/1600/1*EctE-GL5tV0lCpzlLMdtZg.jpeg" alt="" /></p>
<p><strong>Genealogy Standard #25: Note-taking content.</strong>(9) Translators, especially those working in genealogy, are often more than pure linguists, and may be able to shed light on social, historical, and geographical contexts, as well as meanings of terms and phrases. A good translator will include notes and observations you may not have caught yourself.</p>
<p><strong>Genealogy Standard #27: Note-taking objectivity.</strong>(10) A translation should be an exercise in objectivity, as the translator relies only on the document and the contexts it provides. Without this conscious objectivity you might run the risk of including assumptions or omit evidence that may be vital to your proof.</p>
<p><strong>Genealogy Standard #48: Resolving evidence inconsistencies.</strong>(11) A professional translator will be able to help you resolve inconsistencies. This could affect your ability to reach a sound conclusion.</p>
<p><strong>Genealogy Standard #57: Background information.</strong>(12) A translator will be able to provide background information on evidence found in the text, including people, places, events, as well as historical changes in spellings, social and historical contexts, and more. The type of document, the author, and other tangential contexts may yield information. While a translator may not find all contexts, they will be familiar with them. Especially if the translator performs genealogical translations and specializes in the desired language and region.</p>
<h4>… you feel your translation is not solid enough.</h4>
<p><img src="https://cdn-images-1.medium.com/max/1600/1*umQEolHeYZkFogwnjtQUQA.jpeg" alt="" /></p>
<p><strong>Genealogy Standard #29: Transcriptions.</strong>(13) Each translation should include a transcription. This will allow future re-examination of the translation, should conflicting evidence come to light. Errors in transcription, ergo errors in translation, thus can be corrected.</p>
<p><strong>Genealogy Standard #35: Source analysis.</strong>(14) This is an interesting point that has two aspects: one that the translator likely can better evaluate the source they are translating, and the other, that the resulting translation becomes a reliable source for your research, boosting confidence in your findings.</p>
<p><strong>Genealogy Standard #36: Information analysis.</strong>(15) It is difficult to analyze the quality of information provided in a foreign-language document if you do not completely understand the text. A translation should address legibility, identify people, places, events, and comment on any inconsistencies.</p>
<p><strong>Genealogy Standard #39: Information preference.</strong>(16) As a genealogist you will need to weigh the evidence available to you, and choose the strongest evidence both for and against your hypothesis, resulting in the final proof. A professional translation will let you determine its significance to your research. Insecurities in the quality of your own translation may result in an incorrect evaluation.</p>
<h3>Can you do this on your own?</h3>
<p>You can probably guess the answer to this one: “it depends!”(17) If you can afford it and have a favorite translator that provides valuable insights, you should consider it anyway. You may find that your research is more thorough and complete.</p>
<blockquote>
<p>As a general rule, translations that you feel are “well enough”
are most likely not, well, enough.</p>
</blockquote>
<h4>Templates and Forms</h4>
<p>Standardized documents and forms likely are consistent enough for you to translate yourself. Great examples are Family Registers or Baptism records found in many German church books. You will often find guides and templates that help you read the information they contain.(18)</p>
<p><img src="https://cdn-images-1.medium.com/max/1600/1*mxGZHTN7qYvHoupQrPnd6g.jpeg" alt="" />Sample Family Register from German church book with translated template.</p>
<h4>The Check List</h4>
<ul>
<li>Are you able to transcribe the entire text?</li>
<li>Have a machine translation program (like Google Translate) process your transcription. Are all words translated? Do all translated words make sense?</li>
<li>Use the machine translation as a basis for your translation. Is your derived translation grammatically and semantically correct?</li>
<li>Do you understand the meaning of the document?</li>
<li>Are you able to determine the context of the document? Does the meaning of the document still make sense within that context?</li>
<li>Have another genealogist review your translation. Do they agree with your results and are unable to poke holes in your findings?</li>
<li>Does your translation meet all Genealogy Standards?</li>
</ul>
<p>Congratulations if you have answered a resounding “YES!” to all of these. You might not need a translator. What if you did answer “no” and were completely honest with yourself, but find it hard to justify the cost?</p>
<h4>You Are Unable To Hire A Translator</h4>
<p>Get creative and see if you know someone who reads and writes the source language well. They might be able to help you fill in the gaps in exchange for lunch. Or maybe you can help them with their project on something they are trying to figure out.</p>
<p>Ask around in your local genealogy group to see if anyone there might be able to help. If you don’t belong to one, see if there is one in your area, and attend one of their meetings. Often you will find special interest groups that focus on a particular language or place. The <a href="http://www.scgsgenealogy.com/interest-groups/german-group.html">German Special Interest Group</a> of the <a href="http://www.scgsgenealogy.com/">Southern California Genealogy Society</a> is just one example.</p>
<p>Find one that is close to you and make the trip at least once to get to know others and swap stories and experience. If it seems worth it, keep attending their meetings.</p>
<blockquote>
<p>Don’t let difficult translations stop your research. Genealogy is as much experience as it is academic; enjoy the adventure and share it with your friends and family!</p>
</blockquote>
<hr />
<p><em>I would like to thank Evelyn Smith de Galvez (Scribe Publishers) for her assistance in editing the article and holding me accountable for my misuse of language. I would also like to thank</em> <a href="https://twitter.com/MRoseMF"><em>Margaret Fortier</em></a> <em>for providing feedback, as well as</em> <a href="https://twitter.com/CharterOakGenea"><em>Bryna O’Sullivan</em></a> <em>for prompting me to write this article to begin with!</em></p>
<hr />
<ol>
<li>Jones, Thomas W., editor. <em>Genealogy Standards: 50th Anniversary Edition</em> (Nashville, Tennessee: Ancestry.com, 2014), xiii.</li>
<li>Ibid., page 17.</li>
<li>Ibid., page 17.</li>
<li>Ibid., page 18.</li>
<li>Ibid., page 24.</li>
<li>Ibid., page 25.</li>
<li>Ibid., page 26.</li>
<li>Ibid., page 26. Types of assumptions: fundamental vs. valid vs. unsound assumptions.</li>
<li>Ibid., page 17.</li>
<li>Ibid., page 18.</li>
<li>Ibid., page 27.</li>
<li>Ibid., page 34.</li>
<li>Ibid., page 18.</li>
<li>Ibid., page 21.</li>
<li>Ibid., page 22.</li>
<li>Ibid., page 24.</li>
<li>“It depends!” is a term famously used by Tom Jones when answering questions relating to citation methodology.</li>
<li>“Wuerttemberg Family Register Headings.” FamilySearch, 24 Mar 2011. <a href="https://familysearch.org/learn/wiki/en/Wuerttemberg_Family_Register_Headings">https://familysearch.org/learn/wiki/en/Wuerttemberg_Family_Register_Headings</a>, accessed 25 Sep 2015.</li>
</ol>    ]]></content>
</entry>
            <entry>
    <id>https://genealabs.com/blog/how-do-you-find-the-right-translator</id>
    <link type="text/html" rel="alternate" href="https://genealabs.com/blog/how-do-you-find-the-right-translator" />
    <title>How do you find the right translator?</title>
    <published>2017-10-05T00:00:00+00:00</published>
    <updated>2017-10-05T00:00:00+00:00</updated>
    <author>
        <name>Mike Bronner</name>
    </author>
    <summary type="html">In the previous article we discussed how to determine if you need to hire a translator. Now we will cover the (perhaps intimidating) task of trying to find the right translator.

A professional audience (legal, medical, etc.) will most likely require......</summary>
    <content type="html"><![CDATA[
        <p>In the previous article we discussed how to determine if you need to hire a translator. Now we will cover the (perhaps intimidating) task of trying to find the <em>right</em> translator.</p>
<h4>Who is the intended audience?</h4>
<p>A <strong>professional audience</strong> (legal, medical, etc.) will most likely require translations performed by certified translators.</p>
<p><strong>Family, clients, and genealogical publications</strong> are situations where certified translators might not be necessary.</p>
<h4>What is the context of the document?</h4>
<p>The context of the document will help you further narrow down the field of prospects. It is important to hire a translator that understands the context of your document.</p>
<ul>
<li><strong>Historical</strong> context is important for documents that reference or originate from important historical events.</li>
<li><strong>Genealogical</strong> context is important for documents that reference relatives, dates, and locations. Since you are working on a genealogical project, this is a must. Genealogical translators will likely be familiar with the historical context as well.</li>
<li><strong>Medical</strong> context is usually only relevant for documents that discuss medical issues. Examples might include death records, and similar.</li>
<li><strong>Legal</strong> context is important for documents dealing with judicial issues (heirs, warrants, probates, deeds).</li>
</ul>
<h4>Where can I find translators?</h4>
<p><img src="https://cdn-images-1.medium.com/max/1600/1*fN_j7E34WJgsdmczk6ujJQ.jpeg" alt="" /></p>
<p>Translation Associations are a great place to start looking for translators. The <em>International Federation of Translators</em> has a <a href="https://www.fit-ift.org/?page_id=1735">comprehensive listing of translation associations world-wide</a>.</p>
<p>Professional associations are even better for finding the translator you need, especially in Genealogy. The <em>Association of Professional Genealogists</em> provides a <a href="https://www.apgen.org/directory/search_results.html?search=true&amp;related_services=18">directory for genealogical translators</a>.</p>
<h4>Why consider a certified translator?</h4>
<p>Certified translators have a certain level of skill and quality that meets certain standards. Certification is a good indicator that a translator is serious about their craft.</p>
<p>Yet, this does not mean that non-certified translators are less capable. Your first stop should be the AGP Translators list. APG members are serious about their work. They are familiar with genealogy, and hold themselves to a genealogical and ethical standard. A translator that is both an AGP member and certified should be a strong candidate.</p>
<p>Avoid hiring a freelance translator that is neither certified nor a registered APG member. This ensures the you have options for recourse if you run into problems with them down the road.</p>
<p>The next thing we need to do is prepare a spreadsheet to help with narrowing down our candidates.</p>
<h4>How do I narrow down the list of translators?</h4>
<p><img src="https://cdn-images-1.medium.com/max/1600/1*K8Z3In0nRvG-Wrt6lrqUpQ.jpeg" alt="" /></p>
<p>Create a spreadsheet with the following columns:</p>
<ul>
<li>Name</li>
<li>Phone</li>
<li>Website</li>
<li>Certified</li>
<li>Experience</li>
<li>Rates</li>
<li>Impressions</li>
<li>Quote</li>
</ul>
<p>Start browsing through the lists of translators and record the ones that stand out. (Leave “Impressions” and “Quote” blank at this point.) Before you log them, be sure to visit their homepage and read about their experience. If you feel this translator might be a match, log them. Repeat the process ad nauseum. You may find you’re spending a few days on this part — don’t give up.</p>
<p>While reviewing a translator’s web site, look how recently it has been updated or shows activity. If a web site has been stale for more than six months it may indicate the translator is no longer active. Also perform a google search on their name and see how active they are online and what topics they are active in. This will help build up a picture of who they are. Check the main social media sites, too.</p>
<p>Once you have your list of possible candidates put together, we need to create a shortlist of 10 or fewer. Drop those that do not have experience in the required areas. You should end up with a list of 25 or fewer.</p>
<p>Now pick the top 10 you feel most comfortable with based on your research of them so far. This will be our list of finalists we will approach for a quote.</p>
<p>Before we do that, we need to get everything in order.</p>
<h4>How do I prepare my documents for translation?</h4>
<p>First of all, your document needs to be in a high-quality electronic format.</p>
<p><strong>If you have a physical document you need translated:</strong></p>
<ul>
<li>Scan the entire document about 1/4&quot; beyond the borders.</li>
<li>Scan in full color.</li>
<li>Scan at preferably 600dpi or more. The resolution is critical to analysis and examination by the translator.</li>
<li>Save the image in PNG or TIFF format if possible. (JPG format has an inherent loss of image quality, and this is not optimal.)</li>
<li>Make the scanned images available on JumpShare, DropBox, or a similar service.</li>
</ul>
<p><strong>If you received the document already in digital format:</strong></p>
<ul>
<li>record of the link of the online document.</li>
</ul>
<p>Prepare the information you will need when talking with a potential translator:</p>
<ul>
<li><strong>Your information:</strong> name, email, phone, mailing address.</li>
<li><strong>Project information:</strong> a brief summary of your project, including any deadlines.</li>
<li><strong>Document information:</strong> type font, script style, period, origin place or region, and author. Your genealogical society may be able to help identify the language of the document, if it is unclear.</li>
<li><strong>Word count:</strong> Count the number of pages and words (numbers count as words) in the document.</li>
</ul>
<p>Armed with this, we are now set to whittle down our shortlist of prospects, to one worthy translator.</p>
<h4>Select the translator that is right for you!</h4>
<p><img src="https://cdn-images-1.medium.com/max/1600/1*ZoGY-9c3cdmgMjI3bT52_g.png" alt="" /></p>
<p>Give each remaining translator a call. Do not commit until you have spoken with each translator in your shortlist. Describe the document, tell them about its details, and also let them know if you have a deadline.</p>
<p>Discuss their areas of expertise. Take notes on this in the “Experience” column of your spreadsheet. Ask what type of translation projects they have worked on in the past. This should give you a better understanding of their experience. Discuss the time period of your document. Let the translator know if it is hand-written or printed. Many translators only work with modern texts.</p>
<p>Ask them for a quote and provide the number of pages, word count, and document information. They may want to see the document first, in which case email them the link to the document. Record their estimated fees in the “Quote” column.</p>
<p>As you discuss your project with them, also make note of your impressions while talking with them. Are they knowledgeable, personable, and take the time to understand your needs? You get the idea.</p>
<p>At the end of your phone call, let them know that you will be back in touch if you decide to go ahead with the project.</p>
<p>We’re almost at the home stretch! Last thing you need to do is sleep on it. Seriously — wait until the next day to make the decision if you have time. Your decision will be much clearer. Have you felt a connection with any one particular prospect? Where they able to build a rapport with you?</p>
<p>Then all that’s left to do is call the translator of choice and give them the go-ahead. Email them the pertinent information we prepared earlier, but be prepared for questions during the translation process. Any genealogical translator worth their salt will probably come back with some questions surrounding the context of the document, its origins, etc.</p>
<h4>Don’t ignore the copyright.</h4>
<p><img src="https://cdn-images-1.medium.com/max/1600/1*YZvqySVCwOcYk2kwHCaUkQ.jpeg" alt="" /></p>
<p>Finally, you should be aware that the resulting translation is under the copyright of the translator. You will likely need their permission to republish it (regardless if it is for profit or not). Clarify the translator’s copyright requirements from the start.</p>
<p>Hopefully this has proven to be useful. We would love to hear your comments, experiences, and feedback in the comments below.</p>    ]]></content>
</entry>
            <entry>
    <id>https://genealabs.com/blog/upgrading-homestead-to-virtualbox-5</id>
    <link type="text/html" rel="alternate" href="https://genealabs.com/blog/upgrading-homestead-to-virtualbox-5" />
    <title>Upgrading Homestead to VirtualBox 5</title>
    <published>2017-10-05T00:00:00+00:00</published>
    <updated>2017-10-05T00:00:00+00:00</updated>
    <author>
        <name>Mike Bronner</name>
    </author>
    <summary type="html">
_Note on conventions used in this article:


console commands are bold and italic:_ which php5-fpm



*




As with everything, we need to make a consious decision when we do things. In this case a VirtualBox Guest Additions mismatch has severe......</summary>
    <content type="html"><![CDATA[
        <hr />
<p>_Note on conventions used in this article:</p>
<ul>
<li>
<p>console commands are bold and italic:_ <strong><em>which php5-fpm</em></strong></p>
</li>
<li>
<ul>
<li>*</li>
</ul>
</li>
</ul>
<h3>Reasoning</h3>
<p>As with everything, we need to make a consious decision when we do things. In this case a VirtualBox Guest Additions mismatch has severe performance implications and in my case has halted the synchronizing between Vagrant and OS/X.</p>
<hr />
<h3>Requirements</h3>
<ul>
<li>
<p>Homestead 2</p>
</li>
<li>
<p>VirtualBox 5 (5.0.0 or greater)</p>
</li>
<li>
<p>Vagrant 1.7.4 (or greater)</p>
</li>
<li>
<ul>
<li>*</li>
</ul>
</li>
</ul>
<h3>Implementation</h3>
<ol>
<li>Let’s start off by halting Homestead:
<strong><em>homestead halt</em></strong></li>
<li>And next Vagrant: make sure you download the <a href="http://www.vagrantup.com/downloads.html">latest version</a> (1.7.4 as of this writing) and install as usual.</li>
<li>Download and install the <a href="https://www.virtualbox.org/wiki/Downloads">latest version of VirtualBox</a> (5.0.0 as of this writing).</li>
<li>Now for the tricky bit: upgrading VirtualBox Guest Additions. Let’s bring Homestead back up:
<strong><em>homestead up</em></strong> Notice now how it says the Guest Addition version does not match the VirtualBox version?</li>
<li>SSH into Homestead:
<strong><em>homestead ssh</em></strong></li>
<li>Remove any existing packages that we need to build the Guest Additions. (We will install the new versions next.)
*<em>_sudo apt-get remove dkms build-essential linux-headers-</em>_**</li>
<li>Remove any remnants of the old Guest Additions:
*<em>_sudo rm -rf VBoxGuestAdditions-</em>_**</li>
<li>Now lets install the new replacements for them:
<strong><em>sudo apt-get install dkms build-essential linux-headers-$(uname -r)</em></strong></li>
<li>Great! We have the system prepped, and ready to install the new Guest Additions. In my example I am using the 5.0.0 version, but make sure you use the version that matches your VirtualBox (one command, please excuse the inappropriate line breaks — wish Medium had propper code snippet support, the code blocks they do have break the lists):
<strong><em>wget</em></strong> <a href="http://download.virtualbox.org/virtualbox/5.0.0/VBoxGuestAdditions_5.0.0.iso"><strong>_http://download.virtualbox.org/virtualbox/5.0.0/VBoxGuestAdditions<em>5.0.0.iso</em></strong></a></li>
<li>Create a mount point for the ISO:
<strong><em>sudo mkdir /media/VBoxGuestAdditions</em></strong></li>
<li>And mount the ISO (again, this is a single command on one line):
<strong>_sudo mount -o loop,ro VBoxGuestAdditions<em>5.0.0.iso /media/VBoxGuestAdditions</em></strong></li>
<li>Now we can finally install the Guest Additions:
<strong><em>sudo sh /media/VBoxGuestAdditions/VBoxLinuxAdditions.run</em></strong></li>
<li>Once this completes successfully, we can clean up:
<strong><em>sudo umount /media/VBoxGuestAdditions
sudo rm -rf /media/VBoxGuestAdditions
rm VBoxGuestAdditions</em><em>.iso
sudo rm -rf /opt/VBoxGuestAdditions-4</em>_</strong></li>
<li>Exit out of Homestead, and restart it:
<strong><em>exit
homestead halt</em></strong></li>
<li>Let’s bring it back up:
<strong><em>homestead up</em></strong></li>
</ol>
<hr />
<p>And we can rejoice not seeing a Guest Addition version warning! Mission accomplished. Now pat yourself on the back, and get back to work already! 😄</p>
<hr />
<h3>Update</h3>
<p>This process also fixes instances of the following error that may be encountered while running <strong><em>homestead up</em></strong>:</p>
<pre><code>==&gt; default: Mounting shared folders…
default: /vagrant =&gt; /Users/mike/.composer/vendor/laravel/homestead
Failed to mount folders in Linux guest. This is usually because
the “vboxsf” file system is not available. Please verify that
the guest additions are properly installed in the guest and
can work properly. The command attempted was:</code></pre>
<pre><code>mount -t vboxsf -o uid=`id -u vagrant`,gid=`getent group vagrant | cut -d: -f3` vagrant /vagrant
mount -t vboxsf -o uid=`id -u vagrant`,gid=`id -g vagrant` vagrant /vagrant</code></pre>
<pre><code>The error output from the last command was:</code></pre>
<pre><code>mount: wrong fs type, bad option, bad superblock on vagrant,
missing codepage or helper program, or other error</code></pre>
<pre><code>In some cases useful info is found in syslog — try
dmesg | tail or so.</code></pre>    ]]></content>
</entry>
            <entry>
    <id>https://genealabs.com/blog/creating-packages-with-laravel-5-and-studio</id>
    <link type="text/html" rel="alternate" href="https://genealabs.com/blog/creating-packages-with-laravel-5-and-studio" />
    <title>Creating Packages with Laravel 5 &amp; Studio</title>
    <published>2015-05-30T00:00:00+00:00</published>
    <updated>2015-05-30T00:00:00+00:00</updated>
    <author>
        <name>Mike Bronner</name>
    </author>
    <summary type="html">Workbench has sadly been discontinued in Laravel 5. Yes, there are ways to integrate it back into L5, but it seems to be on its way out. So, other than manually wiring up our packages that are in development, what can we do?
Enter @franzliedke’s studio......</summary>
    <content type="html"><![CDATA[
        <p>Workbench has sadly been discontinued in Laravel 5. Yes, there are ways to integrate it back into L5, but it seems to be on its way out. So, other than manually wiring up our packages that are in development, what can we do?</p>
<p>Enter <a href="https://twitter.com/franzliedke">@franzliedke</a>’s <a href="https://github.com/franzliedke/studio"><strong>studio</strong></a> package. It aims to be a widely usable composer package scaffolding tool, but there may be certain instances where it won’t work well for you. So your mileage may vary.</p>
<h3>Requirements</h3>
<ul>
<li>Parent Laravel project</li>
<li>Studio package</li>
</ul>
<h3>Installation</h3>
<p>We want to start the new package in the project you are envisioning it to be used in initially — that’s our “Parent Laravel Project”.</p>
<ol>
<li>Go to your project’s base path. Let’s assume our project is called “purple-turtles” for the sake of demonstration.</li>
</ol>
<pre><code>cd ~/Developer/Sites/purple-turtles</code></pre>
<p>2. Studio documentation recommends installing studio globally with composer, however, this won’t work if you are developing in a VM like Homestead. Instead, let’s install it at the project level:</p>
<pre><code>composer require --dev franzl/studio</code></pre>
<p>3. Now lets get a new package started:</p>
<pre><code>vendor/bin/studio create packages/purple-turles/icecreammachine</code></pre>
<p>4. This will now step through a series of questions to get the package set up:</p>
<ul>
<li>Please name this package: enter the <em>vendor/package</em> name you want to use.</li>
<li>Please provide a default namespace (PSR-4): hit enter if the suggested default is to your liking. If not, like in our case, enter something like “PurpleTurtles\IcecreamMachine”.</li>
<li>… PhpUnit …: enter “y” if you will be using PHPUnit for testing, otherwise you can just hit enter.</li>
<li>… PhpSpec …: enter “y” if you will be using PHPSpec for testing, otherwise you can just hit enter.</li>
<li>… TravisCI …: enter “y” if you will be using TravisCI for builds (this is free for open-source projects).</li>
</ul>
<p>It will now finish up creating the scaffold in the packages directory in your project’s base path.</p>
<p>5. Set up git:</p>
<p>cd packages/purples-turtles/icecreammachine
git init</p>
<p>Now you can use your favorite GIT tool (in my case Git Tower 2) or commandline to publish your package to GitHub or BitBucket, or something similar.</p>
<p>All that’s left now is to publish your package in Packagist and include it in other projects!</p>
<p>Also note that your package will be available in your parent project, as if it was included in the vendor folder.</p>
<p>There is a small drawback in that you need to run <strong>composer update</strong> anytime you make class-level changes (or run <strong>composer dump-autoload -o</strong> if the changes weren’t that drastic) in the package directory, and then run <strong>composer update</strong> or <strong>composer dump-autoload -o</strong> or <strong>php artisan optimize</strong> in the parent project. Would love to see studio hook into the composer process and automatically run composer update on the package whenever the parent project is updated.</p>    ]]></content>
</entry>
            <entry>
    <id>https://genealabs.com/blog/how-to-install-phpci-in-homestead</id>
    <link type="text/html" rel="alternate" href="https://genealabs.com/blog/how-to-install-phpci-in-homestead" />
    <title>How To Install PHPCI In Homestead</title>
    <published>2015-04-08T00:00:00+00:00</published>
    <updated>2015-04-08T00:00:00+00:00</updated>
    <author>
        <name>Mike Bronner</name>
    </author>
    <summary type="html">PHPCI is a nifty little swiss-army-knife for your development toolbox. It provides continuous integration and connects to popular services like GitHub and BitBucket. It will monitor your source repositories for changes, and trigger a new build when it......</summary>
    <content type="html"><![CDATA[
        <p>PHPCI is a nifty little swiss-army-knife for your development toolbox. It provides continuous integration and connects to popular services like GitHub and BitBucket. It will monitor your source repositories for changes, and trigger a new build when it sees activity. Then it will let you know if anything went wrong or can be improved.</p>
<p>This comes in handy to improve your code quality and minimize errors and issues down the road. In the following section we’ll go through the process of installing PHPCI in Homestead.</p>
<p><strong>A word of caution</strong>: it can be unbearibly slow if you install it in the shared folders section. It also helps to have more than 1 processor assigned to Homestead to speed things up.</p>
<hr />
<h3>Pre-Requisites</h3>
<ul>
<li>
<p>Laravel Homestead 2.0 configured and running.</p>
</li>
<li>
<ul>
<li>*</li>
</ul>
</li>
</ul>
<ol>
<li>Make sure Homestead is up and running:</li>
</ol>
<pre><code>homestead up</code></pre>
<p>2. Add a new database “phpci” to Homestead using your favorite SQL admin tool, maybe something like Sequel Pro:</p>
<p><img src="https://cdn-images-1.medium.com/max/1600/1*ugOhTEgnBzkk2YQb3tmJGQ.png" alt="" />Create PHPCI Database</p>
<p>3. Open your Terminal, SSH into your homestead VM, and clone phpci to a dedicated folder outside of the shared folder:</p>
<pre><code>homestead ssh
cd ~
git clone [https://github.com/Block8/PHPCI.git](https://github.com/Block8/PHPCI.git)</code></pre>
<p>4. Get all the dependencies:</p>
<pre><code>cd ~/PHPCI
composer install</code></pre>
<p>4. Configure PHPCI:</p>
<pre><code>./console phpci:install</code></pre>
<p>Using the following answers:</p>
<pre><code>******************
Welcome to PHPCI
******************</code></pre>
<pre><code>Checking requirements… OK</code></pre>
<pre><code>Please answer the following questions:
 — — — — — — — — — — — — — — — — — -</code></pre>
<pre><code>Please enter your MySQL host [localhost]:
Please enter your MySQL database name [phpci]:
Please enter your MySQL username [phpci]: **homestead**
Please enter your MySQL password: **secret**</code></pre>
<pre><code>Your PHPCI URL (“https://phpci.local" for example): **https://phpci.dev:8000**</code></pre>
<pre><code>Setting up your database… OK</code></pre>
<pre><code>Admin Email: **your@email.com**
Admin Name: **Your Name**
Admin Password: **yourpassword**</code></pre>
<pre><code>User account created!</code></pre>
<p>6. Add cron job to automatically run builds:</p>
<pre><code>sudo env EDITOR=nano crontab -e</code></pre>
<p>Add the following to the cron file:</p>
<pre><code>* * * * * sudo php /home/vagrant/PHPCI/console phpci:run-builds</code></pre>
<p>7. Update MySQL configuration:</p>
<pre><code>sudo nano /etc/mysql/my.cnf</code></pre>
<p>(Continue, even if the file doesn’t exist.)
And add the following values in the <strong>[mysqld]</strong> section:</p>
<pre><code>[mysqld]
max_allowed_packet=64M
innodb_log_file_size=512M
innodb_log_buffer_size=768M</code></pre>
<p>8. Restart the MySQL service:</p>
<pre><code>sudo service mysql restart</code></pre>
<p>9. Update PHP configuration:</p>
<pre><code>sudo nano /etc/php5/cli/php.ini</code></pre>
<p>With (leave as is if it is already larger than 1024M):</p>
<pre><code>memory_limit=1024M</code></pre>
<p>10. Let’s exit out of homestead:</p>
<pre><code>exit</code></pre>
<p>11. Edit homestead config:</p>
<pre><code>homestead edit</code></pre>
<p>And add your new PHPCI site:</p>
<pre><code>sites:
  — map: phpci.dev
    to: /home/vagrant/PHPCI/public</code></pre>
<p>12. Update your hosts file:</p>
<pre><code>sudo nano /etc/hosts</code></pre>
<p>And add the relevant entry:</p>
<pre><code>127.0.0.1       phpci.dev</code></pre>
<p>13. Now restart Homestead and provision it:</p>
<pre><code>homestead halt
homestead up --provision</code></pre>
<p>14. Open your browser and go to: <a href="http://phpci.dev:8000">http://phpci.dev:8000</a>.
You should now be able to log in using the email address and password specified in step #4.</p>
<p>15. From here on in just follow all the same established PHPCI procedures as documented in their wiki: <a href="https://github.com/Block8/PHPCI/wiki">https://github.com/Block8/PHPCI/wiki</a></p>
<hr />
<p>In a future post I will discuss setting up a Laravel project and showing off all PHPCI can offer.</p>
<hr />
<h4>Updates</h4>
<ul>
<li><a href="https://twitter.com/egor_pe"><strong>Egor Pervuninski</strong></a> promptly converted these instructions to an <a href="https://github.com/eneset/homestead-phpci">Ansible deployment</a>. Nice job!</li>
</ul>    ]]></content>
</entry>
            <entry>
    <id>https://genealabs.com/blog/set-up-envoyer-on-an-existing-forge-site</id>
    <link type="text/html" rel="alternate" href="https://genealabs.com/blog/set-up-envoyer-on-an-existing-forge-site" />
    <title>Set Up Envoyer On An Existing Forge Site</title>
    <published>2015-03-16T00:00:00+00:00</published>
    <updated>2015-03-16T00:00:00+00:00</updated>
    <author>
        <name>Mike Bronner</name>
    </author>
    <summary type="html">So up until now you’ve been managing your Laravel project deployment with Laravel Forge, but are interested in moving to Envoyer.

“What happens to my existing setup?”

It’s actually very straight-forward to get your existing forge-git-hooked......</summary>
    <content type="html"><![CDATA[
        <p>So up until now you’ve been managing your <a href="http://laravel.com"><strong>Laravel</strong></a> project deployment with <a href="https://forge.laravel.com"><strong>Laravel Forge</strong></a>, but are interested in moving to <a href="http://envoyer.io"><strong>Envoyer</strong></a>.</p>
<blockquote>
<p><strong>“What happens to my existing setup?”</strong></p>
</blockquote>
<p>It’s actually very straight-forward to get your existing forge-git-hooked site to deploy out.</p>
<ol>
<li>Remove any pre-existing Forge deploy hooks that were set up on your git provider.</li>
<li>Follow <a href="https://laracasts.com/series/envoyer">Taylor’s setup instructions on Laracasts</a>. This should include setting up your deploy-on-commit hook, as well as the SSH key on Forge. Be sure to also set up your environment variables. Push your Envoyer project out when you’re ready.</li>
<li>Update your site using Forge site configuration to point to:
<em><site root>/current/public</em></li>
</ol>
<p><img src="https://cdn-images-1.medium.com/max/1600/1*oSAXFPfn571yYIsP1IbO6w.png" alt="" />Example Configuration</p>
<p>4. SSH into your server and go to your project’s root.</p>
<p>5. Copy the content of your .env file: <strong><em>cat .env</em></strong></p>
<p>6. Paste the .env content into Envoyer’s environment management interface and push it to production:</p>
<p><img src="https://cdn-images-1.medium.com/max/1600/1*uJRQCGqfWZfSzi5GP1W_3w.png" alt="" />Environment Management in Envoyer</p>
<hr />
<p>Envoyer actually just rides on top of your old files and adds what it needs. You might want to do some clean-up to get rid of the left-overs, but be aware that this might cause some down-time if things don’t go as expected. <strong><em>Be sure that you can afford some down-time to re-deploy, if anything should happen to go wrong.</em></strong></p>
<p>The following command should remove all but the necessary files for you:</p>
<blockquote>
<p><strong>find . -maxdepth 1 -not -name “.” -not -name “current” -not -name “storage” -not -name “releases” -not -name “.env” -exec rm -rf {} \;</strong></p>
</blockquote>
<hr />
<blockquote>
<p>Your setup is preserved — just a bit of optional cleanup was all it took!</p>
</blockquote>    ]]></content>
</entry>
            <entry>
    <id>https://genealabs.com/blog/run-all-the-commands-outside-of-homestead</id>
    <link type="text/html" rel="alternate" href="https://genealabs.com/blog/run-all-the-commands-outside-of-homestead" />
    <title>Run _#AllTheCommands_ Outside of Homestead</title>
    <published>2015-03-16T00:00:00+00:00</published>
    <updated>2015-03-16T00:00:00+00:00</updated>
    <author>
        <name>Mike Bronner</name>
    </author>
    <summary type="html">Install latested PHP5+MCrypt on Yosemite to enable Laravel Artisan

Laravel Homestead has brought virtual machines for web development to the mainstream PHP developer: it makes setting up a development stack similar to XAMP extremely simple. You no......</summary>
    <content type="html"><![CDATA[
        <p><strong>Install latested PHP5+MCrypt on Yosemite to enable Laravel Artisan</strong></p>
<hr />
<p><a href="http://laravel.com/docs/5.0/homestead">Laravel Homestead</a> has brought virtual machines for web development to the mainstream PHP developer: it makes setting up a development stack similar to XAMP extremely simple. You no longer need to be a pseudo sys-admin to set up Vagrant and Puppet to manage your environments.</p>
<p>However, one of the drawbacks so far has been that you always needed to run Laravel Artisan commands from within homestead, as they depending on MCrypt being installed (which OS X has not yet included by default). The main drawbacks are slow execution (running commands inside homestead is not near as fast as running them natively — I suspect this mostly has to do with the Vagrant Shared Folders feature) and the annoyance of always having to SSH into homestead.</p>
<p>The accepted solution thus far has been to install newer versions of PHP alongside Apple’s version using Homebrew or MacPorts. This would likely require you to compile the MCrypt extension manually. I also found that Homebrew could leave your system in disarray if things went wrong (more than once I had to do a complete restore because of this).</p>
<p>However, there’s another method I came across while research some non-related issues: install the latest version of PHP from a binary that includes the MCrypt extension. It will not bork up your system if you want to remove it, either. ☺Let’s get cooking!</p>
<hr />
<h3>Ingredients</h3>
<ul>
<li>
<p>OS X Yosemite (already installed)</p>
</li>
<li>
<p>Laravel Homestead 2.x (already installed with shared folders set up)</p>
</li>
<li>
<p><a href="http://php-osx.liip.ch">PHP for OS/X</a></p>
</li>
<li>
<ul>
<li>*</li>
</ul>
</li>
</ul>
<h3>Recipe</h3>
<ol>
<li>Open Terminal.</li>
<li>Let’s head to your home directory and install PHP 5.6 (the latest version as of now):</li>
</ol>
<iframe width="700" height="250" src="/media/b4ddfd87a71a24e4477a792b9701ce34?postId=e2fc8d05251f" data-media-id="b4ddfd87a71a24e4477a792b9701ce34" allowfullscreen="" frameborder="0"><iframe width="700" height="250" src="/media/b4ddfd87a71a24e4477a792b9701ce34?postId=e2fc8d05251f" data-media-id="b4ddfd87a71a24e4477a792b9701ce34" allowfullscreen="" frameborder="0"></iframe></iframe>
<p>3. If you are using Oh-My-ZSH:</p>
<iframe width="700" height="250" src="/media/39f2610b56c46a5414d390a09d64241f?postId=e2fc8d05251f" data-media-id="39f2610b56c46a5414d390a09d64241f" allowfullscreen="" frameborder="0"><iframe width="700" height="250" src="/media/39f2610b56c46a5414d390a09d64241f?postId=e2fc8d05251f" data-media-id="39f2610b56c46a5414d390a09d64241f" allowfullscreen="" frameborder="0"></iframe></iframe>
<p>And prepend “/usr/local/php5/bin:” to the “export PATH” string, like so:</p>
<iframe width="700" height="250" src="/media/85b3252a288771b936be53e4452daffc?postId=e2fc8d05251f" data-media-id="85b3252a288771b936be53e4452daffc" allowfullscreen="" frameborder="0"><iframe width="700" height="250" src="/media/85b3252a288771b936be53e4452daffc?postId=e2fc8d05251f" data-media-id="85b3252a288771b936be53e4452daffc" allowfullscreen="" frameborder="0"></iframe></iframe>
<p>4. If you are using Bash (default):</p>
<iframe width="700" height="250" src="/media/de66c4484e4c75027aee39ac5c4c6534?postId=e2fc8d05251f" data-media-id="de66c4484e4c75027aee39ac5c4c6534" allowfullscreen="" frameborder="0"><iframe width="700" height="250" src="/media/de66c4484e4c75027aee39ac5c4c6534?postId=e2fc8d05251f" data-media-id="de66c4484e4c75027aee39ac5c4c6534" allowfullscreen="" frameborder="0"></iframe></iframe>
<p>And add the following line at the end (if you already have entries there):</p>
<iframe width="700" height="250" src="/media/fde537d04e9fee3a2ead07128e8e4e7c?postId=e2fc8d05251f" data-media-id="fde537d04e9fee3a2ead07128e8e4e7c" allowfullscreen="" frameborder="0"><iframe width="700" height="250" src="/media/fde537d04e9fee3a2ead07128e8e4e7c?postId=e2fc8d05251f" data-media-id="fde537d04e9fee3a2ead07128e8e4e7c" allowfullscreen="" frameborder="0"></iframe></iframe>
<p>5. Quit and restart Terminal.</p>
<p>6. Go to one of your Laravel projects in your Homestead-shared folder (don’t SSH into Homestead though), and run:</p>
<iframe width="700" height="250" src="/media/3b58e17ab0bc15ce71751e6407712d85?postId=e2fc8d05251f" data-media-id="3b58e17ab0bc15ce71751e6407712d85" allowfullscreen="" frameborder="0"><iframe width="700" height="250" src="/media/3b58e17ab0bc15ce71751e6407712d85?postId=e2fc8d05251f" data-media-id="3b58e17ab0bc15ce71751e6407712d85" allowfullscreen="" frameborder="0"></iframe></iframe>
<hr />
<h3>The Cake</h3>
<p>If all went well, you should be greeted by the following output (you will most likely have a newer version of Laravel installed):</p>
<p><img src="https://cdn-images-1.medium.com/max/1600/1*bJ8vFt8_cChMLRcQz4xZpw.png" alt="" />Artisan Commands Available Outside Homestead</p>
<hr />
<h3>And The Icing</h3>
<p>We still have the one command that won’t play nice, though: “<strong>php artisan migrate</strong>”. There’s a fix for that too:</p>
<p>In your project, edit config/database.php, changing</p>
<iframe width="700" height="250" src="/media/a7640fb44de2c2f3628226dd3dc399b9?postId=e2fc8d05251f" data-media-id="a7640fb44de2c2f3628226dd3dc399b9" allowfullscreen="" frameborder="0"><iframe width="700" height="250" src="/media/a7640fb44de2c2f3628226dd3dc399b9?postId=e2fc8d05251f" data-media-id="a7640fb44de2c2f3628226dd3dc399b9" allowfullscreen="" frameborder="0"></iframe></iframe>Original Database Settings

To:

<iframe width="700" height="250" src="/media/9e717d7ceda176fc15e8f21376af7829?postId=e2fc8d05251f" data-media-id="9e717d7ceda176fc15e8f21376af7829" allowfullscreen="" frameborder="0"><iframe width="700" height="250" src="/media/9e717d7ceda176fc15e8f21376af7829?postId=e2fc8d05251f" data-media-id="9e717d7ceda176fc15e8f21376af7829" allowfullscreen="" frameborder="0"></iframe></iframe>New and improved database settings!

* * *

### Sources

*   [https://php-osx.liip.ch](https://php-osx.liip.ch/)
*   [https://jacurtis.com/easily-install-mcrypt-php-mavericks-yosemite/](https://jacurtis.com/easily-install-mcrypt-php-mavericks-yosemite/)
*   [https://laracasts.com/discuss/channels/general-discussion/homestead-db-connection-problem](https://laracasts.com/discuss/channels/general-discussion/homestead-db-connection-problem)    ]]></content>
</entry>
            <entry>
    <id>https://genealabs.com/blog/agnoster-terminal-theme-on-osx</id>
    <link type="text/html" rel="alternate" href="https://genealabs.com/blog/agnoster-terminal-theme-on-osx" />
    <title>Agnoster Terminal Theme on OS X</title>
    <published>2015-02-27T00:00:00+00:00</published>
    <updated>2015-02-27T00:00:00+00:00</updated>
    <author>
        <name>Mike Bronner</name>
    </author>
    <summary type="html">Installing Oh-My-ZSH with Agnoster on Yosemite

The Agnoster ZSH theme is getting a lot of wind in its sails these days, and Mirza Pasic’s recent blog post in this topic sparked my interest. I’m always eager to try new things to aid my development......</summary>
    <content type="html"><![CDATA[
        <p><strong>Installing Oh-My-ZSH with Agnoster on Yosemite</strong></p>
<hr />
<p>The Agnoster ZSH theme is getting a lot of wind in its sails these days, and Mirza Pasic’s recent <a href="https://bosnadev.com/2015/02/26/awesome-looking-terminal-with-oh-my-zsh/">blog post</a> in this topic sparked my interest. I’m always eager to try new things to aid my development workflow.</p>
<p>While his article outlines the how-to for Ubuntu, I’ll constrain myself to OS X, in my case Yosemite. We’ll end up with something similar to this:</p>
<p><img src="https://cdn-images-1.medium.com/max/1600/1*a56Zo8tlEaleWieobAtY9g.png" alt="" />Preview</p>
<hr />
<h3>Prerequisites</h3>
<ul>
<li><strong>Mac Terminal</strong> (preinstalled)</li>
<li><strong>ZSH</strong> (preinstalled)</li>
<li><strong>Oh-My-Zsh</strong> Refer to the <a href="https://github.com/robbyrussell/oh-my-zsh">full installation guide</a> for more details.</li>
</ul>
<iframe width="700" height="250" src="/media/a7e4cfa0a4c9d468b39c67eca36a631a?postId=391d60effaf6" data-media-id="a7e4cfa0a4c9d468b39c67eca36a631a" allowfullscreen="" frameborder="0"><iframe width="700" height="250" src="/media/a7e4cfa0a4c9d468b39c67eca36a631a?postId=391d60effaf6" data-media-id="a7e4cfa0a4c9d468b39c67eca36a631a" allowfullscreen="" frameborder="0"></iframe></iframe>Install Oh-My-ZSH

*   **Ubuntu Mono Derivative Powerline Font** [Download Fonts](https://github.com/powerline/fonts/archive/master.zip)

* * *

### Installation

Now that we have identified our pre-requisites, let’s get started:

1.  Download the font archive, and unzip it. Go to _fonts-master/UbuntuMono/_ and install each of the four TTFs: simply double-click and let Font Book install them for you.
2.  Open Terminal, then navigate to _Terminal Preferences &gt; Profiles &gt; Font_ and click the Change button.
3.  Select _Ubuntu Mono derivative Powerline_ and set the font size to your liking.
4.  Close preferences, and quit Terminal.
5.  If you haven’t already done so, install Oh-My-ZSH.
6.  Now let’s configure your ZSH theme settings:

<iframe width="700" height="250" src="/media/39f2610b56c46a5414d390a09d64241f?postId=391d60effaf6" data-media-id="39f2610b56c46a5414d390a09d64241f" allowfullscreen="" frameborder="0"><iframe width="700" height="250" src="/media/39f2610b56c46a5414d390a09d64241f?postId=391d60effaf6" data-media-id="39f2610b56c46a5414d390a09d64241f" allowfullscreen="" frameborder="0"></iframe></iframe>Edit the ZSH Configuration

8\. There we will update our theme. You can find “ZSH_THEME=” toward the top of the file:

<iframe width="700" height="250" src="/media/3364c8937df411694a97f32ec8695a04?postId=391d60effaf6" data-media-id="3364c8937df411694a97f32ec8695a04" allowfullscreen="" frameborder="0"><iframe width="700" height="250" src="/media/3364c8937df411694a97f32ec8695a04?postId=391d60effaf6" data-media-id="3364c8937df411694a97f32ec8695a04" allowfullscreen="" frameborder="0"></iframe></iframe>Set the ZSH Theme

9\. Save you changes (CTRL-X if you’re using Nano, continue editing forever if you’re using Vi or Vim).

10\. Quit and restart Terminal.

11\. You should now see your new theme in place.

* * *

### Bonus

#### Custom Colors

You can customize your color preferences as desired in _Terminal Preferences &gt; Profiles &gt; ANSI Colors_.

#### Agnoster in PHPStorm Terminal

So now that we have the OS/X Terminal configured, you’re thinking that’s all well and good, but doesn’t really help if you’re using PHPStorm’s integrated Terminal window. Actually, now that you look at it, it only seems to have made things worse.

Never fear, the fix for that is here!

1.  Open the Terminal window and position it in the IDE to you liking.
2.  Open PHPStorm Preferences (CDM-, or PHPStorm &gt; Preferences … menu item).
3.  Go to Editor &gt; Colors &amp; Fonts &gt; Console Colors. Change Console standard output &gt; Foreground to White. Change Console background &gt; Background to Black.
4.  Go to Editor &gt; Colors &amp; Fonts &gt; Console Font. Change Primary Font to Ubuntu Mono Derivative Powerline, Size 16, Line spacing 1.4.
5.  Click OK to close the preferences window.
6.  Click the red X in the Terminal frame to kill the current terminal, then click on the Terminal tab again to open a fresh terminal window with the new settings.
7.  If you have similar settings to mine, it should look something like the screenshot below.

![](https://cdn-images-1.medium.com/max/1600/1*0qmBJfm1SA0-g7yZonQLlA.jpeg)Agnoster Theme inside PHPStorm Terminal

* * *

### Feedback

Would love to hear your feedback — share your thoughts, problems, or improvements in the comments.    ]]></content>
</entry>
    </feed>
